/*
 * BaSyx AAS Environment Component
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.mateusmolina.basyx.aasenvironment.client.api;

import com.github.mateusmolina.basyx.aasenvironment.client.invoker.*;
import com.github.mateusmolina.basyx.aasenvironment.client.invoker.auth.*;
import com.github.mateusmolina.basyx.aasenvironment.client.model.AssetAdministrationShell;
import com.github.mateusmolina.basyx.aasenvironment.client.model.AssetInformation;
import com.github.mateusmolina.basyx.aasenvironment.client.model.Reference;
import com.github.mateusmolina.basyx.aasenvironment.client.model.Result;
import com.github.mateusmolina.basyx.aasenvironment.client.model.SpecificAssetID;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AssetAdministrationShellRepositoryApiApi
 */
public class AssetAdministrationShellRepositoryApiApiTest {

    private final AssetAdministrationShellRepositoryApiApi api = new AssetAdministrationShellRepositoryApiApi();

    /**
     * Deletes an Asset Administration Shell
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAssetAdministrationShellByIdTest() throws ApiException {
        //String aasIdentifier = null;
        //Result response = api.deleteAssetAdministrationShellById(aasIdentifier);
        // TODO: test validations
    }

    /**
     * Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself!
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubmodelReferenceByIdAasRepositoryTest() throws ApiException {
        //String aasIdentifier = null;
        //String submodelIdentifier = null;
        //Result response = api.deleteSubmodelReferenceByIdAasRepository(aasIdentifier, submodelIdentifier);
        // TODO: test validations
    }

    /**
     * Returns all Asset Administration Shells
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllAssetAdministrationShellsTest() throws ApiException {
        //List<SpecificAssetID> assetIds = null;
        //String idShort = null;
        //String limit = null;
        //String cursor = null;
        //String response = api.getAllAssetAdministrationShells(assetIds, idShort, limit, cursor);
        // TODO: test validations
    }

    /**
     * Returns all submodel references
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllSubmodelReferencesAasRepositoryTest() throws ApiException {
        //String aasIdentifier = null;
        //String limit = null;
        //String cursor = null;
        //Result response = api.getAllSubmodelReferencesAasRepository(aasIdentifier, limit, cursor);
        // TODO: test validations
    }

    /**
     * Returns a specific Asset Administration Shell
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssetAdministrationShellByIdTest() throws ApiException {
        //String aasIdentifier = null;
        //Result response = api.getAssetAdministrationShellById(aasIdentifier);
        // TODO: test validations
    }

    /**
     * Returns the Asset Information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssetInformationAasRepositoryTest() throws ApiException {
        //String aasIdentifier = null;
        //AssetInformation response = api.getAssetInformationAasRepository(aasIdentifier);
        // TODO: test validations
    }

    /**
     * Creates a new Asset Administration Shell
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postAssetAdministrationShellTest() throws ApiException {
        //AssetAdministrationShell assetAdministrationShell = null;
        //Result response = api.postAssetAdministrationShell(assetAdministrationShell);
        // TODO: test validations
    }

    /**
     * Creates a submodel reference at the Asset Administration Shell
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSubmodelReferenceAasRepositoryTest() throws ApiException {
        //String aasIdentifier = null;
        //Reference reference = null;
        //Result response = api.postSubmodelReferenceAasRepository(aasIdentifier, reference);
        // TODO: test validations
    }

    /**
     * Updates an existing Asset Administration Shell
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putAssetAdministrationShellByIdTest() throws ApiException {
        //String aasIdentifier = null;
        //AssetAdministrationShell assetAdministrationShell = null;
        //Result response = api.putAssetAdministrationShellById(aasIdentifier, assetAdministrationShell);
        // TODO: test validations
    }

    /**
     * Updates the Asset Information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putAssetInformationAasRepositoryTest() throws ApiException {
        //String aasIdentifier = null;
        //AssetInformation assetInformation = null;
        //Result response = api.putAssetInformationAasRepository(aasIdentifier, assetInformation);
        // TODO: test validations
    }

}
