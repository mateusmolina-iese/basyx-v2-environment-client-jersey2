/*
 * BaSyx AAS Environment Component
 * AAS Environment API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: basyx-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.mateusmolina.basyx.aasenvironment.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.github.mateusmolina.basyx.aasenvironment.client.model.Reference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.github.mateusmolina.basyx.aasenvironment.client.invoker.JSON;


/**
 * Extension
 */
@JsonPropertyOrder({
  Extension.JSON_PROPERTY_VALUE_TYPE,
  Extension.JSON_PROPERTY_REFERS_TO,
  Extension.JSON_PROPERTY_NAME,
  Extension.JSON_PROPERTY_VALUE,
  Extension.JSON_PROPERTY_SEMANTIC_I_D,
  Extension.JSON_PROPERTY_SUPPLEMENTAL_SEMANTIC_IDS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-03T13:20:12.648099800+02:00[Europe/Berlin]")
public class Extension {
  /**
   * Gets or Sets valueType
   */
  public enum ValueTypeEnum {
    ANY_URI("ANY_URI"),
    
    BASE64BINARY("BASE64BINARY"),
    
    BOOLEAN("BOOLEAN"),
    
    BYTE("BYTE"),
    
    DATE("DATE"),
    
    DATE_TIME("DATE_TIME"),
    
    DECIMAL("DECIMAL"),
    
    DOUBLE("DOUBLE"),
    
    DURATION("DURATION"),
    
    FLOAT("FLOAT"),
    
    GDAY("GDAY"),
    
    GMONTH("GMONTH"),
    
    GMONTH_DAY("GMONTH_DAY"),
    
    GYEAR("GYEAR"),
    
    GYEAR_MONTH("GYEAR_MONTH"),
    
    HEX_BINARY("HEX_BINARY"),
    
    INT("INT"),
    
    INTEGER("INTEGER"),
    
    LONG("LONG"),
    
    NEGATIVE_INTEGER("NEGATIVE_INTEGER"),
    
    NON_NEGATIVE_INTEGER("NON_NEGATIVE_INTEGER"),
    
    NON_POSITIVE_INTEGER("NON_POSITIVE_INTEGER"),
    
    POSITIVE_INTEGER("POSITIVE_INTEGER"),
    
    SHORT("SHORT"),
    
    STRING("STRING"),
    
    TIME("TIME"),
    
    UNSIGNED_BYTE("UNSIGNED_BYTE"),
    
    UNSIGNED_INT("UNSIGNED_INT"),
    
    UNSIGNED_LONG("UNSIGNED_LONG"),
    
    UNSIGNED_SHORT("UNSIGNED_SHORT");

    private String value;

    ValueTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ValueTypeEnum fromValue(String value) {
      for (ValueTypeEnum b : ValueTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VALUE_TYPE = "valueType";
  private ValueTypeEnum valueType;

  public static final String JSON_PROPERTY_REFERS_TO = "refersTo";
  private List<Reference> refersTo;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_VALUE = "value";
  private String value;

  public static final String JSON_PROPERTY_SEMANTIC_I_D = "semanticID";
  private Reference semanticID;

  public static final String JSON_PROPERTY_SUPPLEMENTAL_SEMANTIC_IDS = "supplementalSemanticIds";
  private List<Reference> supplementalSemanticIds;

  public Extension() { 
  }

  public Extension valueType(ValueTypeEnum valueType) {
    this.valueType = valueType;
    return this;
  }

   /**
   * Get valueType
   * @return valueType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALUE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ValueTypeEnum getValueType() {
    return valueType;
  }


  @JsonProperty(JSON_PROPERTY_VALUE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValueType(ValueTypeEnum valueType) {
    this.valueType = valueType;
  }


  public Extension refersTo(List<Reference> refersTo) {
    this.refersTo = refersTo;
    return this;
  }

  public Extension addRefersToItem(Reference refersToItem) {
    if (this.refersTo == null) {
      this.refersTo = new ArrayList<>();
    }
    this.refersTo.add(refersToItem);
    return this;
  }

   /**
   * Get refersTo
   * @return refersTo
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFERS_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Reference> getRefersTo() {
    return refersTo;
  }


  @JsonProperty(JSON_PROPERTY_REFERS_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRefersTo(List<Reference> refersTo) {
    this.refersTo = refersTo;
  }


  public Extension name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public Extension value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValue(String value) {
    this.value = value;
  }


  public Extension semanticID(Reference semanticID) {
    this.semanticID = semanticID;
    return this;
  }

   /**
   * Get semanticID
   * @return semanticID
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEMANTIC_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Reference getSemanticID() {
    return semanticID;
  }


  @JsonProperty(JSON_PROPERTY_SEMANTIC_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSemanticID(Reference semanticID) {
    this.semanticID = semanticID;
  }


  public Extension supplementalSemanticIds(List<Reference> supplementalSemanticIds) {
    this.supplementalSemanticIds = supplementalSemanticIds;
    return this;
  }

  public Extension addSupplementalSemanticIdsItem(Reference supplementalSemanticIdsItem) {
    if (this.supplementalSemanticIds == null) {
      this.supplementalSemanticIds = new ArrayList<>();
    }
    this.supplementalSemanticIds.add(supplementalSemanticIdsItem);
    return this;
  }

   /**
   * Get supplementalSemanticIds
   * @return supplementalSemanticIds
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUPPLEMENTAL_SEMANTIC_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Reference> getSupplementalSemanticIds() {
    return supplementalSemanticIds;
  }


  @JsonProperty(JSON_PROPERTY_SUPPLEMENTAL_SEMANTIC_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSupplementalSemanticIds(List<Reference> supplementalSemanticIds) {
    this.supplementalSemanticIds = supplementalSemanticIds;
  }


  /**
   * Return true if this Extension object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Extension extension = (Extension) o;
    return Objects.equals(this.valueType, extension.valueType) &&
        Objects.equals(this.refersTo, extension.refersTo) &&
        Objects.equals(this.name, extension.name) &&
        Objects.equals(this.value, extension.value) &&
        Objects.equals(this.semanticID, extension.semanticID) &&
        Objects.equals(this.supplementalSemanticIds, extension.supplementalSemanticIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(valueType, refersTo, name, value, semanticID, supplementalSemanticIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Extension {\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("    refersTo: ").append(toIndentedString(refersTo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    semanticID: ").append(toIndentedString(semanticID)).append("\n");
    sb.append("    supplementalSemanticIds: ").append(toIndentedString(supplementalSemanticIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

